===============================================
           코드 수정 프로세스 메모
===============================================

사용자가 요청한 코드 수정 시 항상 따라야 할 7단계:

1. 파일 분석 단계
   - 수정할 파일의 전체 내용을 먼저 읽어보기
   - 관련된 다른 파일들도 함께 확인하기
   - 현재 코드의 구조와 의존성 파악하기

2. 영향도 분석 단계
   - 변경사항이 다른 파일에 미치는 영향 분석
   - 호출하는 함수나 참조하는 변수들 확인
   - 잠재적 오류 지점 파악

3. 코드 백업 단계
   - Git을 사용하여 현재 상태 백업
   - 백업 브랜치 생성 또는 커밋 생성
   - 수정 전 상태를 안전하게 보존
   - 반드시 원격 저장소에 푸시하여 백업 완료
   - 백업 완료 후 수정 진행

4. 안전한 수정 계획 수립
   - 단계별 수정 계획 제시
   - 수정할 부분과 이유 명확히 설명
   - 수정 전후 비교 가능하도록 준비

5. 실행 단계
   - 한 번에 하나씩 안전하게 수정
   - 각 단계마다 확인 후 다음 단계 진행
   - 오류 발생 시 즉시 중단하고 롤백

6. 검증 단계
   - 수정 후 린트 검사 실행
   - 컴파일 오류 확인
   - 기능 동작 검증

7. 수정 사항 요약 정리
   - 수정된 파일 목록과 변경 내용 요약
   - 주요 변경사항과 이유 설명
   - 수정으로 인한 영향도 정리
   - 테스트 권장사항 제시
   - 반드시 최종 결과를 원격 저장소에 푸시

===============================================
           사용 방법
===============================================

코드 수정 요청을 받으면:
1. 이 메모를 먼저 읽어보기
2. 7단계를 순서대로 진행하기
3. 각 단계마다 진행 상황을 사용자에게 알려주기
4. 단계를 건너뛰지 않고 반드시 순서대로 진행하기

===============================================
           중요 사항
===============================================

- 이 프로세스를 생략하지 말고 항상 순서대로 진행
- 각 단계마다 사용자에게 진행 상황 알려주기
- 오류 발생 시 즉시 중단하고 롤백하기
- 수정 후 반드시 검증 단계 거치기
- 최종적으로 상세한 요약 정리 제공하기
- 백업과 수정 완료 후 반드시 원격 저장소에 푸시하기

===============================================
           향후 주의사항 (Git 백업 강화)
===============================================

1. 수정 전 백업 확인
   - 모든 코드 수정 요청 시 현재 Git 상태 확인
   - Working tree clean 상태 확인
   - 원격 저장소와 동기화 상태 확인
   - 수정 전 현재 상태를 백업 커밋으로 저장
   - 원격 저장소에 푸시하여 안전하게 백업

2. 수정 중 백업 모니터링
   - 각 단계별 Git 상태 지속 모니터링
   - 오류 발생 시 즉시 롤백 및 백업 상태 복원
   - 중간 단계에서도 필요시 백업 커밋 생성

3. 수정 후 백업 완료 확인
   - 최종 변경사항을 커밋으로 저장
   - 원격 저장소에 푸시하여 최종 백업
   - 백업 성공 여부 검증 및 확인

4. Git 상태 체크리스트
   ✅ 수정 전: git status → working tree clean 확인
   ✅ 수정 전: git push → 원격 저장소 동기화 확인
   ✅ 수정 중: 각 단계별 git status 모니터링
   ✅ 수정 후: git add . && git commit && git push
   ✅ 최종 확인: git status → up to date 확인

5. 백업 실패 시 대응
   - 백업 실패 시 즉시 수정 중단
   - 사용자에게 백업 문제 상황 알림
   - 백업 문제 해결 후 수정 재개
   - 절대 백업 없이 수정 진행하지 않기

===============================================
           Unity 적용방법 가이드
===============================================

코드 수정 완료 후 Unity에서 적용하는 방법:

1. 스크립트 적용 단계
   - 생성된 스크립트 파일을 Unity Project 창에서 확인
   - 스크립트가 컴파일되는지 Console 창에서 확인
   - 오류가 있다면 스크립트 문법 검토

2. GameObject 설정
   - Hierarchy에서 빈 GameObject 생성
   - 생성된 GameObject에 스크립트 Component 추가
   - Inspector에서 스크립트의 SerializeField 변수들 연결

3. UI 요소 설정 (UI 스크립트인 경우)
   - Canvas 생성 및 설정
   - UI 요소들 (Button, Text, Image 등) 생성
   - UI 요소들을 스크립트의 SerializeField에 연결
   - Button의 OnClick 이벤트에 스크립트 메서드 연결

4. 연결 확인 체크리스트
   ✅ 스크립트가 GameObject에 정상적으로 연결됨
   ✅ Inspector의 모든 SerializeField가 연결됨
   ✅ UI 요소들이 올바르게 배치됨
   ✅ Button 이벤트가 올바르게 연결됨
   ✅ Console에 오류 메시지가 없음

5. 테스트 및 디버깅
   - Play Mode에서 기능 테스트
   - Console 창에서 Debug.Log 메시지 확인
   - 오류 발생 시 스크립트와 Inspector 설정 재확인
   - 필요시 스크립트 수정 후 재컴파일

6. 최종 확인
   - 모든 기능이 정상 작동하는지 확인
   - UI 전환이 부드럽게 이루어지는지 확인
   - 예상치 못한 오류가 없는지 확인
   - 빌드 테스트 (필요시)

===============================================
           마지막 업데이트: 2024년 12월
===============================================
